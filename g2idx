#!/usr/bin/env python
# 
# GPLv3 2011-2012 by anonymous
# 

import igraph, math, csv, time
from sys import argv, exit
from os import listdir, path, environ, closerange
from jinja2 import Template, Environment, FileSystemLoader
from optparse import OptionParser
from datetime import datetime
try:
    from collections import Counter
except ImportError:
    print "ERR: please use python >= 2.7"
    exit(1)

environ['TZ'] = 'UTC'
time.tzset()

parser = OptionParser()
parser.add_option("-g", "--gml", dest="gmlfile",
    help="Single source graph in gml format FILE", metavar="FILE")

parser.add_option("-i", "--include", dest="gmllist",
    help="Load all .gml graphs listed in FILE", metavar="FILE")

parser.add_option("-d", "--dest", dest="destdir",
    default=".",
    help="Destination DIR. Default: current dir", 
    metavar="DIR")

parser.add_option("-x", "--index", dest="index",
    default="index.tmpl",
    help="Create index using FILE as template. Default: index.tmpl", 
    metavar="FILE")

(options, args) = parser.parse_args()

graph_files = set()
if options.gmlfile:
    graph_files.add(options.gmlfile.strip())

if options.gmllist:
    gfh = open(options.gmllist)
    for gf in gfh.readlines():
        graph_files.add(gf.strip())
    gfh.close()

if len(graph_files) < 1:
    print "No source .gml files"
    exit(1)

def format_timestamp(ts, tsformat = '%Y-%m-%d'):
    d = datetime.fromtimestamp(float(ts))
    return d.strftime(tsformat)

CURDIR = path.dirname(path.abspath(__file__))
env = Environment(loader=FileSystemLoader(CURDIR))
env.filters['formatts'] = format_timestamp

# load index template
index_tmpl = env.get_template(options.index)
index = list()

for gml in graph_files:
    # load graph from file
    g = igraph.load(gml)
    
    if 'tags' in g.attributes(): 
        tags = g['tags'].split(',')
    else:
        tags = []

    if 'classification' in g.vs.attribute_names():
        classifications = g.vs['classification']

    if options.index:
        meta = {
            'nodes': g.vcount(),
            'edges': g.ecount(),
            'filename': "%s.html" % path.basename(gml), 
            'tags': tags,
            'diameter': g.diameter(),
            'radius': g.radius()
        }

        # count and manual sort of classifications
        if classifications:
            clf_sort = {
                'UNCLASSIFIED': 0,
                'UNCLASSIFIED//FOR OFFICIAL USE ONLY': 1,
                'CONFIDENTIAL': 2,
                'CONFIDENTIAL//NOFORN': 3,
                'SECRET': 4,
                'SECRET//NOFORN': 5,
                '': 6
            }
            # count
            ccnt = Counter(classifications).items()
            # total
            t = float(len(classifications))
            # percent
            clfp = [ (c, float(cnt) /(t / 100)) for c, cnt in ccnt ]
            # manual sort
            scc = sorted(clfp, key=lambda c: clf_sort[c[0]])
            meta.update({'classification': scc})

        index.append(meta)
    del g

index_file = "%s/index.html" % (options.destdir)
if path.exists(index_file):
    print "Index %s exists. skipping" % index_file
else:
    print "Writing %s" % index_file
    ifh = open(index_file,'w')
    ifh.write(index_tmpl.render(index=sorted(index, reverse=True)))
    ifh.close()

